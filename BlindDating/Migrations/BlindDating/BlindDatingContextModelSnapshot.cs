// <auto-generated />
using System;
using BlindDating.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlindDating.Migrations.BlindDating
{
    [DbContext(typeof(BlindDatingContext))]
    partial class BlindDatingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlindDating.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("BlindDating.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BlindDating.Models.DatingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnName("age");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnName("bio")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnName("displayName")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("gender")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhotoPath")
                        .HasColumnName("photoPath")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("DatingProfile");
                });

            modelBuilder.Entity("BlindDating.Models.MailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FromProfileId")
                        .HasColumnName("fromProfileID");

                    b.Property<bool>("IsRead")
                        .HasColumnName("isRead");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnName("messageText")
                        .HasColumnType("text");

                    b.Property<string>("MessageTitle")
                        .IsRequired()
                        .HasColumnName("messageTitle")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("FromProfileId");

                    b.ToTable("MailMessage");
                });

            modelBuilder.Entity("BlindDating.Models.MailSent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FromProfileId")
                        .HasColumnName("fromProfileID");

                    b.Property<int?>("MailMessageId")
                        .HasColumnName("mailMessageID");

                    b.Property<int?>("ToProfileId")
                        .HasColumnName("toProfileID");

                    b.HasKey("Id");

                    b.HasIndex("FromProfileId");

                    b.HasIndex("MailMessageId");

                    b.HasIndex("ToProfileId");

                    b.ToTable("MailSent");
                });

            modelBuilder.Entity("BlindDating.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("BlindDating.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("BlindDating.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("BlindDating.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("BlindDating.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlindDating.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlindDating.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("BlindDating.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlindDating.Models.MailMessage", b =>
                {
                    b.HasOne("BlindDating.Models.DatingProfile", "FromProfile")
                        .WithMany("MailMessage")
                        .HasForeignKey("FromProfileId")
                        .HasConstraintName("FK__MailMessa__fromP__4BAC3F29");
                });

            modelBuilder.Entity("BlindDating.Models.MailSent", b =>
                {
                    b.HasOne("BlindDating.Models.DatingProfile", "FromProfile")
                        .WithMany("MailSentFromProfile")
                        .HasForeignKey("FromProfileId")
                        .HasConstraintName("FK__MailSent__fromPr__4F7CD00D");

                    b.HasOne("BlindDating.Models.MailMessage", "MailMessage")
                        .WithMany("MailSent")
                        .HasForeignKey("MailMessageId")
                        .HasConstraintName("FK__MailSent__mailMe__5070F446");

                    b.HasOne("BlindDating.Models.DatingProfile", "ToProfile")
                        .WithMany("MailSentToProfile")
                        .HasForeignKey("ToProfileId")
                        .HasConstraintName("FK__MailSent__toProf__4E88ABD4");
                });
#pragma warning restore 612, 618
        }
    }
}
